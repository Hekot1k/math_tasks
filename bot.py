import os
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from random import choice, shuffle
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = ""
scheduler = AsyncIOScheduler()
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


user_schedules = {}
current_sessions = {}

class UserState(StatesGroup):
    choose_answer = State()
    creating_days = State()
    creating_time = State()
    creating_count = State()
    creating_difficulty = State()
    in_progress = State()
    in_progress_schedule = State()

main_kb = ReplyKeyboardMarkup(resize_keyboard=True) \
    .add(KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞')) \
    .row(KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'), KeyboardButton('üéöÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å'))

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True) \
    .add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))

schedule_kb = ReplyKeyboardMarkup(resize_keyboard=True) \
    .add(KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')) \
    .add(KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

start_session_kb = ReplyKeyboardMarkup(resize_keyboard=True) \
    .add(KeyboardButton('üöÄ –ù–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ')) \
    .add(KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

difficulty_kb = ReplyKeyboardMarkup(resize_keyboard=True) \
    .row(KeyboardButton('üçÄ –õ–µ–≥–∫–∏–µ'), KeyboardButton('üéØ –°—Ä–µ–¥–Ω–∏–µ')) \
    .add(KeyboardButton('üí£ –°–ª–æ–∂–Ω—ã–µ')) \
    .add(KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

difficulty_cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True) \
    .row(KeyboardButton('üçÄ –õ–µ–≥–∫–∏–µ'), KeyboardButton('üéØ –°—Ä–µ–¥–Ω–∏–µ')) \
    .add(KeyboardButton('üí£ –°–ª–æ–∂–Ω—ã–µ')) \
    .add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))

TASKS = {
    "üí£ –°–ª–æ–∂–Ω—ã–µ": [
        ("7‚àí3(5x‚àí3)=‚àí11x", "4"),
        ("–ù–∞–π–¥–∏—Ç–µ –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞ 82**, –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 90.", "80"),
        ("–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x‚àí3(3x+1)=11.", "-2"),
        ("–ö–æ—Ñ–µ–≤–∞—Ä–∫—É –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ —É—Ü–µ–Ω–∏–ª–∏ –Ω–∞ 20%, –ø—Ä–∏ —ç—Ç–æ–º –æ–Ω–∞ —Å—Ç–∞–ª–∞ —Å—Ç–æ–∏—Ç—å 4800 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Å—Ç–æ–∏–ª–∞ –∫–æ—Ñ–µ–≤–∞—Ä–∫–∞ –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏?", "6000")
    ,("–°–∞–º–æ–ª—ë—Ç, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –ø–æ–ª—ë—Ç–µ, –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç 230 –º–µ—Ç—Ä–æ–≤ –∑–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É. –í—ã—Ä–∞–∑–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∞–º–æ–ª—ë—Ç–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –≤ —á–∞—Å.","828"),
        ("–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 16‚àí7(5‚àíx)=9.", "4")],
    "üéØ –°—Ä–µ–¥–Ω–∏–µ": [
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n 5,4¬∑5,5+3,7.", "33.4"),
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n ‚àí4,9+4,81:1,3.", "-1,2"),
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n ‚àí4,5+6,24:1,6.", "-0,6"),
        ("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –µ–¥–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 72–∫–º/—á. –°–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ –æ–Ω –ø—Ä–æ–µ–∑–∂–∞–µ—Ç –∑–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É?", "20"),
        ("–í –ø–ª–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ª–∏—Ü–µ—è –≤—Ö–æ–¥–∏—Ç —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ª–∞. –ë—ã–ª–æ —Ä–µ—à–µ–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ —Ä–∞–∑–∞, –∞ —à–∏—Ä–∏–Ω—É —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 20%. –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–ª–æ—â–∞–¥—å —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç? –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö", "1.4")
    ],
    "üçÄ –õ–µ–≥–∫–∏–µ": [
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n 8,26‚àí7,52:2.", "4,5"),
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è \n(2,3+1,9):3,5", "1,2"),
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n 2,9+1,92:1,6.", "4,1"),
        ("–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n 6,4¬∑8,5+0,8.", "55,2")
    ]
}
async def on_startup(_):
    scheduler.start()

async def on_shutdown(_):
    scheduler.shutdown()
    await bot.close()


def normalize_answer(answer: str) -> str:
    return answer.replace(',', '.').strip().lower()

@dp.message_handler(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞', state='*')
async def cancel_creation(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("üìö –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=main_kb)

@dp.message_handler(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def main_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message_handler(text='üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞')
async def random_task(message: types.Message):
    all_tasks = [task for category in TASKS.values() for task in category]
    task = choice(all_tasks)
    await message.answer(f"üîî –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n\n{task[0]}", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await UserState.in_progress.set()
    current_sessions[message.from_user.id] = task

@dp.message_handler(text='üéöÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å')
async def set_difficulty(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_kb)

@dp.message_handler(text=['üçÄ –õ–µ–≥–∫–∏–µ', 'üéØ –°—Ä–µ–¥–Ω–∏–µ', 'üí£ –°–ª–æ–∂–Ω—ã–µ'])
async def difficulty_selected(message: types.Message):
    tasks = TASKS[message.text]
    task = choice(tasks)
    await message.answer(f"üîî {message.text} –∑–∞–¥–∞—á–∞:\n\n{task[0]}", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await UserState.in_progress.set()
    current_sessions[message.from_user.id] = task

@dp.message_handler(state=UserState.in_progress)
async def check_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    task = current_sessions.get(user_id)
    if not task:
        await state.finish()
        return
    user_answer = normalize_answer(message.text)
    correct_answer = normalize_answer(task[1])
    if user_answer == correct_answer:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!", reply_markup=main_kb)
        del current_sessions[user_id]
        await state.finish()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.")

@dp.message_handler(text='üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def schedule_menu(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_schedules:
        schedule = user_schedules[user_id]
        text = (
            f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
            f"‚Ä¢ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {schedule['days'] - schedule['current_day']}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π: {schedule['time']}\n"
            f"‚Ä¢ –ó–∞–¥–∞—á –≤ –¥–µ–Ω—å: {schedule['count']}\n"
            f"‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {schedule['difficulty']}"
        )
        await message.answer(text, reply_markup=schedule_kb)
    else:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å? (–¥–∞/–Ω–µ—Ç)")
        await UserState.choose_answer.set()

@dp.message_handler(state=UserState.choose_answer)
async def set_days(message: types.Message, state: FSMContext):
    if message.text.lower() != '–¥–∞':
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb)
        await state.finish()
        return
    await message.answer("üìÜ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? (–æ—Ç 1 –¥–æ 30)", reply_markup=cancel_kb)
    await UserState.creating_days.set()

@dp.message_handler(state=UserState.creating_days)
async def set_time(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not 1 <= int(message.text) <= 30:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30", reply_markup=cancel_kb)
        return
    await state.update_data(days=int(message.text))
    await message.answer("‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞–¥–∞—á–∏? (–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú)", reply_markup=cancel_kb)
    await UserState.creating_time.set()

@dp.message_handler(state=UserState.creating_time)
async def set_count(message: types.Message, state: FSMContext):
    try:
        time = datetime.strptime(message.text, "%H:%M").time()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú", reply_markup=cancel_kb)
        return
    await state.update_data(time=time.strftime("%H:%M"))
    await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∞—Ç—å? (–æ—Ç 1 –¥–æ 10)", reply_markup=cancel_kb)
    await UserState.creating_count.set()

@dp.message_handler(state=UserState.creating_count)
async def set_difficulty_schedule(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not 1 <= int(message.text) <= 10:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞—á! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=cancel_kb)
        return
    await state.update_data(count=int(message.text))
    await message.answer("üéöÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á:", reply_markup=difficulty_cancel_kb)
    await UserState.creating_difficulty.set()

@dp.message_handler(text=['üçÄ –õ–µ–≥–∫–∏–µ', 'üéØ –°—Ä–µ–¥–Ω–∏–µ', 'üí£ –°–ª–æ–∂–Ω—ã–µ'], state=UserState.creating_difficulty)
async def save_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    schedule = {
        'days': data['days'],
        'current_day': 0,
        'time': data['time'],
        'count': data['count'],
        'difficulty': message.text,
        'tasks': []
    }
    user_schedules[user_id] = schedule
    await generate_tasks(user_id)
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=main_kb)
    await state.finish()
    await schedule_tasks(user_id)

async def generate_tasks(user_id: int):
    schedule = user_schedules[user_id]
    all_tasks = TASKS[schedule['difficulty']].copy()
    shuffle(all_tasks)
    for day in range(schedule['days']):
        daily_tasks = all_tasks[day * schedule['count']: (day + 1) * schedule['count']]
        if not daily_tasks:
            daily_tasks = [choice(all_tasks) for _ in range(schedule['count'])]
        schedule['tasks'].append(daily_tasks)

async def schedule_tasks(user_id: int):
    schedule = user_schedules[user_id]
    now = datetime.now()
    target_time = datetime.strptime(schedule['time'], "%H:%M").time()
    first_run = datetime.combine(now.date(), target_time)
    if first_run < now:
        first_run += timedelta(days=1)
    scheduler.add_job(
        send_notification,
        'date',
        run_date=first_run,
        args=[user_id],
        id=f'schedule_{user_id}'
    )

async def send_notification(user_id: int):
    schedule = user_schedules.get(user_id)
    if not schedule:
        return
    if schedule['current_day'] >= schedule['days']:
        await bot.send_message(user_id, "üéâ –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω—ã!", reply_markup=main_kb)
        del user_schedules[user_id]
        return
    await bot.send_message(
        user_id,
        f"‚è∞ –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è! –î–µ–Ω—å {schedule['current_day'] + 1}/{schedule['days']}",
        reply_markup=start_session_kb
    )

@dp.message_handler(text='üöÄ –ù–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ')
async def start_session(message: types.Message):
    user_id = message.from_user.id
    schedule = user_schedules.get(user_id)
    if not schedule or schedule['current_day'] >= schedule['days']:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=main_kb)
        return
    tasks = schedule['tasks'][schedule['current_day']]
    question, answer = tasks[0]
    await message.answer(f"üîî –ó–∞–¥–∞—á–∞ 1/{schedule['count']}:\n\n{question}", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    current_sessions[user_id] = {
        'schedule': schedule,
        'tasks': tasks,
        'current': 1,
        'total': schedule['count'],
        'correct_answer': answer
    }
    await UserState.in_progress_schedule.set()

@dp.message_handler(state=UserState.in_progress_schedule)
async def handle_session_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    session = current_sessions.get(user_id)
    if not session:
        await state.finish()
        return
    user_answer = normalize_answer(message.text)
    correct_answer = normalize_answer(session['correct_answer'])
    if user_answer == correct_answer:
        session['current'] += 1
        if session['current'] > session['total']:
            await message.answer("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", reply_markup=main_kb)
            user_schedules[user_id]['current_day'] += 1
            await schedule_tasks(user_id)
            await state.finish()
            del current_sessions[user_id]
            return
        next_question, next_answer = session['tasks'][session['current'] - 1]
        session['correct_answer'] = next_answer
        await message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –ó–∞–¥–∞—á–∞ {session['current']}/{session['total']}:\n\n{next_question}")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
    current_sessions[user_id] = session

@dp.message_handler(text='‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def delete_schedule(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_schedules:
        del user_schedules[user_id]
        scheduler.remove_job(f'schedule_{user_id}')
        await message.answer("üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_kb)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=main_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
